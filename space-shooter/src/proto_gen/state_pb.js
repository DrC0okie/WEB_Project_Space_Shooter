// source: state.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.GameDeltaUpdate', null, global);
goog.exportSymbol('proto.InitialGameState', null, global);
goog.exportSymbol('proto.MovedProjectileUpdate', null, global);
goog.exportSymbol('proto.Player', null, global);
goog.exportSymbol('proto.Projectile', null, global);
goog.exportSymbol('proto.Vec2', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Vec2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Vec2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Vec2.displayName = 'proto.Vec2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Player.displayName = 'proto.Player';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Projectile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Projectile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Projectile.displayName = 'proto.Projectile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MovedProjectileUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MovedProjectileUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MovedProjectileUpdate.displayName = 'proto.MovedProjectileUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameDeltaUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GameDeltaUpdate.repeatedFields_, null);
};
goog.inherits(proto.GameDeltaUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GameDeltaUpdate.displayName = 'proto.GameDeltaUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InitialGameState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.InitialGameState.repeatedFields_, null);
};
goog.inherits(proto.InitialGameState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.InitialGameState.displayName = 'proto.InitialGameState';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Vec2.prototype.toObject = function(opt_includeInstance) {
  return proto.Vec2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Vec2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Vec2.toObject = function(includeInstance, msg) {
  var f, obj = {
x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Vec2}
 */
proto.Vec2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Vec2;
  return proto.Vec2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Vec2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Vec2}
 */
proto.Vec2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Vec2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Vec2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Vec2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Vec2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.Vec2.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Vec2} returns this
 */
proto.Vec2.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.Vec2.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Vec2} returns this
 */
proto.Vec2.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
nickname: jspb.Message.getFieldWithDefault(msg, 2, ""),
team: jspb.Message.getFieldWithDefault(msg, 3, ""),
position: (f = msg.getPosition()) && proto.Vec2.toObject(includeInstance, f),
angle: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
velocity: (f = msg.getVelocity()) && proto.Vec2.toObject(includeInstance, f),
health: jspb.Message.getFieldWithDefault(msg, 7, 0),
score: jspb.Message.getFieldWithDefault(msg, 8, 0),
deathCount: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Player}
 */
proto.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Player;
  return proto.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Player}
 */
proto.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeam(value);
      break;
    case 4:
      var value = new proto.Vec2;
      reader.readMessage(value,proto.Vec2.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAngle(value);
      break;
    case 6:
      var value = new proto.Vec2;
      reader.readMessage(value,proto.Vec2.deserializeBinaryFromReader);
      msg.setVelocity(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHealth(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeathCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTeam();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Vec2.serializeBinaryToWriter
    );
  }
  f = message.getAngle();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getVelocity();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Vec2.serializeBinaryToWriter
    );
  }
  f = message.getHealth();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getDeathCount();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Player.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Player} returns this
 */
proto.Player.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string nickname = 2;
 * @return {string}
 */
proto.Player.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Player} returns this
 */
proto.Player.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string team = 3;
 * @return {string}
 */
proto.Player.prototype.getTeam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Player} returns this
 */
proto.Player.prototype.setTeam = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Vec2 position = 4;
 * @return {?proto.Vec2}
 */
proto.Player.prototype.getPosition = function() {
  return /** @type{?proto.Vec2} */ (
    jspb.Message.getWrapperField(this, proto.Vec2, 4));
};


/**
 * @param {?proto.Vec2|undefined} value
 * @return {!proto.Player} returns this
*/
proto.Player.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Player} returns this
 */
proto.Player.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Player.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float angle = 5;
 * @return {number}
 */
proto.Player.prototype.getAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Player} returns this
 */
proto.Player.prototype.setAngle = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional Vec2 velocity = 6;
 * @return {?proto.Vec2}
 */
proto.Player.prototype.getVelocity = function() {
  return /** @type{?proto.Vec2} */ (
    jspb.Message.getWrapperField(this, proto.Vec2, 6));
};


/**
 * @param {?proto.Vec2|undefined} value
 * @return {!proto.Player} returns this
*/
proto.Player.prototype.setVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Player} returns this
 */
proto.Player.prototype.clearVelocity = function() {
  return this.setVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Player.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 health = 7;
 * @return {number}
 */
proto.Player.prototype.getHealth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Player} returns this
 */
proto.Player.prototype.setHealth = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 score = 8;
 * @return {number}
 */
proto.Player.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.Player} returns this
 */
proto.Player.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 death_count = 9;
 * @return {number}
 */
proto.Player.prototype.getDeathCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.Player} returns this
 */
proto.Player.prototype.setDeathCount = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Projectile.prototype.toObject = function(opt_includeInstance) {
  return proto.Projectile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Projectile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Projectile.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, 0),
ownerId: jspb.Message.getFieldWithDefault(msg, 2, ""),
position: (f = msg.getPosition()) && proto.Vec2.toObject(includeInstance, f),
direction: (f = msg.getDirection()) && proto.Vec2.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Projectile}
 */
proto.Projectile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Projectile;
  return proto.Projectile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Projectile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Projectile}
 */
proto.Projectile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerId(value);
      break;
    case 3:
      var value = new proto.Vec2;
      reader.readMessage(value,proto.Vec2.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 4:
      var value = new proto.Vec2;
      reader.readMessage(value,proto.Vec2.deserializeBinaryFromReader);
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Projectile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Projectile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Projectile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Projectile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getOwnerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Vec2.serializeBinaryToWriter
    );
  }
  f = message.getDirection();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Vec2.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.Projectile.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Projectile} returns this
 */
proto.Projectile.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string owner_id = 2;
 * @return {string}
 */
proto.Projectile.prototype.getOwnerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Projectile} returns this
 */
proto.Projectile.prototype.setOwnerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Vec2 position = 3;
 * @return {?proto.Vec2}
 */
proto.Projectile.prototype.getPosition = function() {
  return /** @type{?proto.Vec2} */ (
    jspb.Message.getWrapperField(this, proto.Vec2, 3));
};


/**
 * @param {?proto.Vec2|undefined} value
 * @return {!proto.Projectile} returns this
*/
proto.Projectile.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Projectile} returns this
 */
proto.Projectile.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Projectile.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Vec2 direction = 4;
 * @return {?proto.Vec2}
 */
proto.Projectile.prototype.getDirection = function() {
  return /** @type{?proto.Vec2} */ (
    jspb.Message.getWrapperField(this, proto.Vec2, 4));
};


/**
 * @param {?proto.Vec2|undefined} value
 * @return {!proto.Projectile} returns this
*/
proto.Projectile.prototype.setDirection = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Projectile} returns this
 */
proto.Projectile.prototype.clearDirection = function() {
  return this.setDirection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Projectile.prototype.hasDirection = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MovedProjectileUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.MovedProjectileUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MovedProjectileUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MovedProjectileUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, 0),
position: (f = msg.getPosition()) && proto.Vec2.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MovedProjectileUpdate}
 */
proto.MovedProjectileUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MovedProjectileUpdate;
  return proto.MovedProjectileUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MovedProjectileUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MovedProjectileUpdate}
 */
proto.MovedProjectileUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.Vec2;
      reader.readMessage(value,proto.Vec2.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MovedProjectileUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MovedProjectileUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MovedProjectileUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MovedProjectileUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Vec2.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.MovedProjectileUpdate.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MovedProjectileUpdate} returns this
 */
proto.MovedProjectileUpdate.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Vec2 position = 2;
 * @return {?proto.Vec2}
 */
proto.MovedProjectileUpdate.prototype.getPosition = function() {
  return /** @type{?proto.Vec2} */ (
    jspb.Message.getWrapperField(this, proto.Vec2, 2));
};


/**
 * @param {?proto.Vec2|undefined} value
 * @return {!proto.MovedProjectileUpdate} returns this
*/
proto.MovedProjectileUpdate.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MovedProjectileUpdate} returns this
 */
proto.MovedProjectileUpdate.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MovedProjectileUpdate.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GameDeltaUpdate.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameDeltaUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.GameDeltaUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameDeltaUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameDeltaUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
playersMap: (f = msg.getPlayersMap()) ? f.toObject(includeInstance, proto.Player.toObject) : [],
newProjectilesList: jspb.Message.toObjectList(msg.getNewProjectilesList(),
    proto.Projectile.toObject, includeInstance),
destroyedProjectileIdsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
movedProjectilesList: jspb.Message.toObjectList(msg.getMovedProjectilesList(),
    proto.MovedProjectileUpdate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameDeltaUpdate}
 */
proto.GameDeltaUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameDeltaUpdate;
  return proto.GameDeltaUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameDeltaUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameDeltaUpdate}
 */
proto.GameDeltaUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getPlayersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.Player.deserializeBinaryFromReader, "", new proto.Player());
         });
      break;
    case 2:
      var value = new proto.Projectile;
      reader.readMessage(value,proto.Projectile.deserializeBinaryFromReader);
      msg.addNewProjectiles(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addDestroyedProjectileIds(values[i]);
      }
      break;
    case 4:
      var value = new proto.MovedProjectileUpdate;
      reader.readMessage(value,proto.MovedProjectileUpdate.deserializeBinaryFromReader);
      msg.addMovedProjectiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameDeltaUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameDeltaUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameDeltaUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameDeltaUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.Player.serializeBinaryToWriter);
  }
  f = message.getNewProjectilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Projectile.serializeBinaryToWriter
    );
  }
  f = message.getDestroyedProjectileIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      3,
      f
    );
  }
  f = message.getMovedProjectilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.MovedProjectileUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * map<string, Player> players = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.Player>}
 */
proto.GameDeltaUpdate.prototype.getPlayersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.Player>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.Player));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.GameDeltaUpdate} returns this
 */
proto.GameDeltaUpdate.prototype.clearPlayersMap = function() {
  this.getPlayersMap().clear();
  return this;
};


/**
 * repeated Projectile new_projectiles = 2;
 * @return {!Array<!proto.Projectile>}
 */
proto.GameDeltaUpdate.prototype.getNewProjectilesList = function() {
  return /** @type{!Array<!proto.Projectile>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Projectile, 2));
};


/**
 * @param {!Array<!proto.Projectile>} value
 * @return {!proto.GameDeltaUpdate} returns this
*/
proto.GameDeltaUpdate.prototype.setNewProjectilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Projectile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Projectile}
 */
proto.GameDeltaUpdate.prototype.addNewProjectiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Projectile, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GameDeltaUpdate} returns this
 */
proto.GameDeltaUpdate.prototype.clearNewProjectilesList = function() {
  return this.setNewProjectilesList([]);
};


/**
 * repeated int64 destroyed_projectile_ids = 3;
 * @return {!Array<number>}
 */
proto.GameDeltaUpdate.prototype.getDestroyedProjectileIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.GameDeltaUpdate} returns this
 */
proto.GameDeltaUpdate.prototype.setDestroyedProjectileIdsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.GameDeltaUpdate} returns this
 */
proto.GameDeltaUpdate.prototype.addDestroyedProjectileIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GameDeltaUpdate} returns this
 */
proto.GameDeltaUpdate.prototype.clearDestroyedProjectileIdsList = function() {
  return this.setDestroyedProjectileIdsList([]);
};


/**
 * repeated MovedProjectileUpdate moved_projectiles = 4;
 * @return {!Array<!proto.MovedProjectileUpdate>}
 */
proto.GameDeltaUpdate.prototype.getMovedProjectilesList = function() {
  return /** @type{!Array<!proto.MovedProjectileUpdate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MovedProjectileUpdate, 4));
};


/**
 * @param {!Array<!proto.MovedProjectileUpdate>} value
 * @return {!proto.GameDeltaUpdate} returns this
*/
proto.GameDeltaUpdate.prototype.setMovedProjectilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.MovedProjectileUpdate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MovedProjectileUpdate}
 */
proto.GameDeltaUpdate.prototype.addMovedProjectiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.MovedProjectileUpdate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GameDeltaUpdate} returns this
 */
proto.GameDeltaUpdate.prototype.clearMovedProjectilesList = function() {
  return this.setMovedProjectilesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.InitialGameState.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InitialGameState.prototype.toObject = function(opt_includeInstance) {
  return proto.InitialGameState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InitialGameState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InitialGameState.toObject = function(includeInstance, msg) {
  var f, obj = {
allPlayersMap: (f = msg.getAllPlayersMap()) ? f.toObject(includeInstance, proto.Player.toObject) : [],
allProjectilesList: jspb.Message.toObjectList(msg.getAllProjectilesList(),
    proto.Projectile.toObject, includeInstance),
yourId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InitialGameState}
 */
proto.InitialGameState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InitialGameState;
  return proto.InitialGameState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InitialGameState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InitialGameState}
 */
proto.InitialGameState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getAllPlayersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.Player.deserializeBinaryFromReader, "", new proto.Player());
         });
      break;
    case 2:
      var value = new proto.Projectile;
      reader.readMessage(value,proto.Projectile.deserializeBinaryFromReader);
      msg.addAllProjectiles(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setYourId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InitialGameState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InitialGameState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InitialGameState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InitialGameState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllPlayersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.Player.serializeBinaryToWriter);
  }
  f = message.getAllProjectilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Projectile.serializeBinaryToWriter
    );
  }
  f = message.getYourId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * map<string, Player> all_players = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.Player>}
 */
proto.InitialGameState.prototype.getAllPlayersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.Player>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.Player));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.InitialGameState} returns this
 */
proto.InitialGameState.prototype.clearAllPlayersMap = function() {
  this.getAllPlayersMap().clear();
  return this;
};


/**
 * repeated Projectile all_projectiles = 2;
 * @return {!Array<!proto.Projectile>}
 */
proto.InitialGameState.prototype.getAllProjectilesList = function() {
  return /** @type{!Array<!proto.Projectile>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Projectile, 2));
};


/**
 * @param {!Array<!proto.Projectile>} value
 * @return {!proto.InitialGameState} returns this
*/
proto.InitialGameState.prototype.setAllProjectilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Projectile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Projectile}
 */
proto.InitialGameState.prototype.addAllProjectiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Projectile, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.InitialGameState} returns this
 */
proto.InitialGameState.prototype.clearAllProjectilesList = function() {
  return this.setAllProjectilesList([]);
};


/**
 * optional string your_id = 3;
 * @return {string}
 */
proto.InitialGameState.prototype.getYourId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.InitialGameState} returns this
 */
proto.InitialGameState.prototype.setYourId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto);
